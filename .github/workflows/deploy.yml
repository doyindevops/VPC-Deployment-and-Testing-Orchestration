name: 'Terraform Infrastructure Provisioning with Security Scanning'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  backend-setup:
    name: 'Setup Backend Resources'
    runs-on: ubuntu-latest

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v2

    - name: 'Set up Terraform'
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: 'Debug AWS Credentials'
      run: echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}, AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}, AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}"

    - name: 'Terraform Init without Backend'
      run: terraform init -backend=false  # Initialize without using the backend
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: 'Terraform Apply Backend Resources'
      run: terraform apply -auto-approve \
           -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
           -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

  terraform:
    name: 'Terraform Plan and Apply'
    runs-on: ubuntu-latest
    needs: backend-setup  # Ensure this job runs after backend-setup

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v2

    - name: 'Set up Terraform with Backend'
      run: |
        # Reconfigure Terraform to use the backend now that it exists
        terraform init -reconfigure
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: 'Terraform Plan'
      run: terraform plan -out=tfplan \
           -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
           -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: 'Upload Terraform Plan Artifact'
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: tfplan

    - name: 'Terraform Apply'
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve \
           -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
           -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

  build-and-scan:
    name: 'Build, Start Services, and Security Scan'
    runs-on: ubuntu-latest
    needs: terraform  # Ensure this job runs after Terraform plan and apply
    services:
      docker:
        image: docker:20.10.7
        options: --privileged

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v2

    - name: 'Set up Docker Compose'
      run: sudo apt-get update && sudo apt-get install -y docker-compose

    - name: 'Install Terraform'
      run: |
        sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install terraform

    - name: 'Install Snyk CLI'
      run: npm install -g snyk

    - name: 'Login to Docker Hub'
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: 'Build Docker Image'
      run: docker build -t myapp:latest .

    - name: 'Build and Start Services'
      run: docker-compose up -d --build

    - name: 'Verify Docker Daemon'
      run: docker info

    - name: 'Prepare Workspace'
      run: mkdir -p ./workspace

    - name: 'Scan Docker Image with Snyk'
      run: snyk container test myapp:latest --file=Dockerfile --severity-threshold=critical > ./workspace/snyk-scan-results.txt
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true

    - name: 'Aqua Security Scan'
      run: |
        docker run -v $(pwd)/workspace:/workspace aquasec/trivy:0.18.3 image --format json --output /workspace/trivy-scan-results.json myapp:latest
      continue-on-error: true

    - name: 'Upload Scan Results'
      uses: actions/upload-artifact@v3
      with:
        name: scan-results
        path: ./workspace/*.txt
